service: Onionful

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}

custom:
  serverless-offline:
    host: 0.0.0.0

functions:
  # auth

  auth:
    handler: src/auth.check
    cors: true

  rotateToken:
    handler: src/auth.rotateToken
    cors: true
    events:
      - schedule:
        rate: cron(0 0/8 * * *)
      - http:
          path: rotate
          method: get
          cors: true


  # users

  usersList:
    handler: src/users.list
    events:
      - http:
          path: users
          method: get
          authorizer: auth
          cors: true


  # profile

  profileGet:
    handler: src/profile.get
    events:
      - http:
          path: profile
          method: get
          authorizer: auth
          cors: true

  profileUpdate:
    handler: src/profile.update
    events:
      - http:
          path: profile
          method: put
          authorizer: auth
          cors: true


  # contentTypes

  contentTypesCreate:
    handler: src/contentTypes.create
    events:
      - http:
          path: content-types
          method: post
          authorizer: auth
          cors: true

  contentTypesUpdate:
    handler: src/contentTypes.update
    events:
      - http:
          path: content-types/{slug}
          method: put
          authorizer: auth
          cors: true

  contentTypesGet:
    handler: src/contentTypes.get
    events:
      - http:
          path: content-types/{id}
          method: get
          cors: true

  contentTypesList:
    handler: src/contentTypes.list
    events:
      - http:
          path: content-types
          method: get
          cors: true


  # content

  contentCreate:
    handler: src/content.create
    events:
      - http:
          path: content
          method: post
          authorizer: auth
          cors: true

  contentUpdate:
    handler: src/content.update
    events:
      - http:
          path: content/{slug}
          method: put
          authorizer: auth
          cors: true

  contentGet:
    handler: src/content.get
    events:
      - http:
          path: content/{slug}
          method: get
          cors: true

  contentList:
    handler: src/content.list
    events:
      - http:
          path: content
          method: get
          cors: true


  # spaces

  spacesCreate:
    handler: src/spaces.create
    events:
      - http:
          path: spaces
          method: post
          authorizer: auth
          cors: true

  spacesUpdate:
    handler: src/spaces.update
    events:
      - http:
          path: spaces/{id}
          method: put
          authorizer: auth
          cors: true

  spacesGet:
    handler: src/spaces.get
    events:
      - http:
          path: spaces/{id}
          method: get
          cors: true

  spacesList:
    handler: src/spaces.list
    events:
      - http:
          path: spaces
          method: get
          cors: true
